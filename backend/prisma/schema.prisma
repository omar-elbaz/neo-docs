// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  documents Document[]
  sharedDocuments DocumentShare[]
  editedDocuments Document[] @relation("DocumentLastEditor")

  @@map("users")
}

model Document {
  id          String        @id @default(cuid())
  title       String
  content     Json?         // Rich document content (ProseMirror/similar format)
  version     Int           @default(1) // Document version for operational transforms
  revisionId  String        @default(cuid()) // For operational transforms
  isShared    Boolean       @default(false)
  isArchived  Boolean       @default(false)
  isPublic    Boolean       @default(false)
  deletedAt   DateTime?     // Soft delete timestamp
  lastEditedBy String?
  lastEditor  User?         @relation("DocumentLastEditor", fields: [lastEditedBy], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  authorId    String
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  shares      DocumentShare[]
  tags        DocumentTag[]
  operations  DocumentOperation[]
  activities  DocumentActivity[]

  @@map("documents")
}

model DocumentShare {
  id         String   @id @default(cuid())
  permission SharePermission @default(READ)
  createdAt  DateTime @default(now())

  // Relations
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
  @@map("document_shares")
}

model DocumentTag {
  id        String   @id @default(cuid())
  name      String
  color     String?
  createdAt DateTime @default(now())

  // Relations
  documents Document[]

  @@unique([name])
  @@map("document_tags")
}

model DocumentOperation {
  id          String   @id @default(cuid())
  operation   Json     // Operational transform data
  userId      String   // Who made the change
  version     Int      // Document version this operation creates
  timestamp   DateTime // When the operation occurred
  revisionId  String   // Document revision this applies to
  createdAt   DateTime @default(now())

  // Relations
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_operations")
}

model DocumentActivity {
  id          String   @id @default(cuid())
  type        String   // Activity type (user_join, user_leave, etc.)
  userId      String   // User who performed the activity
  timestamp   DateTime // When the activity occurred
  createdAt   DateTime @default(now())

  // Relations
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_activities")
}

enum UserRole {
  ADMIN
  USER
  GUEST
}

enum SharePermission {
  READ
  WRITE
  ADMIN
}