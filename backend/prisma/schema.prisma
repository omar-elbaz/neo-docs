generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DocumentToDocumentTag {
  A             String
  B             String
  documents     documents     @relation(fields: [A], references: [id], onDelete: Cascade)
  document_tags document_tags @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_DocumentToDocumentTag_AB_pkey")
  @@index([B], map: "_DocumentToDocumentTag_B_index")
  @@map("_DocumentToDocumentTag")
}

model document_activities {
  id         String    @id
  type       String
  userId     String
  timestamp  DateTime
  createdAt  DateTime  @default(now())
  documentId String
  documents  documents @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model document_operations {
  id         String    @id
  operation  Json
  userId     String
  revisionId String
  createdAt  DateTime  @default(now())
  documentId String
  timestamp  DateTime
  version    Int
  documents  documents @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model document_shares {
  id         String          @id
  permission SharePermission @default(READ)
  createdAt  DateTime        @default(now())
  documentId String
  userId     String
  documents  documents       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  users      users           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
}

model document_tags {
  id                    String                  @id
  name                  String                  @unique
  color                 String?
  createdAt             DateTime                @default(now())
  DocumentToDocumentTag DocumentToDocumentTag[]
}

model documents {
  id                                  String                  @id
  title                               String
  isShared                            Boolean                 @default(false)
  isArchived                          Boolean                 @default(false)
  createdAt                           DateTime                @default(now())
  updatedAt                           DateTime
  authorId                            String
  isPublic                            Boolean                 @default(false)
  lastEditedBy                        String?
  revisionId                          String
  content                             Json?
  deletedAt                           DateTime?
  version                             Int                     @default(1)
  DocumentToDocumentTag               DocumentToDocumentTag[]
  document_activities                 document_activities[]
  document_operations                 document_operations[]
  document_shares                     document_shares[]
  users_documents_authorIdTousers     users                   @relation("documents_authorIdTousers", fields: [authorId], references: [id], onDelete: Cascade)
  users_documents_lastEditedByTousers users?                  @relation("documents_lastEditedByTousers", fields: [lastEditedBy], references: [id])
}

model users {
  id                                      String            @id
  email                                   String            @unique
  password                                String
  isActive                                Boolean           @default(true)
  createdAt                               DateTime          @default(now())
  updatedAt                               DateTime
  firstName                               String?
  lastName                                String?
  document_shares                         document_shares[]
  documents_documents_authorIdTousers     documents[]       @relation("documents_authorIdTousers")
  documents_documents_lastEditedByTousers documents[]       @relation("documents_lastEditedByTousers")
}

enum SharePermission {
  READ
  WRITE
  ADMIN
}

enum UserRole {
  ADMIN
  USER
  GUEST
}
